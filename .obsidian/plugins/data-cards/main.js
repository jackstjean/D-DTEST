/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin-
*/

var H=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var O=Object.prototype.hasOwnProperty;var U=(v,a)=>{for(var e in a)H(v,e,{get:a[e],enumerable:!0})},W=(v,a,e,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let n of I(a))!O.call(v,n)&&n!==e&&H(v,n,{get:()=>a[n],enumerable:!(t=N(a,n))||t.enumerable});return v};var V=v=>W(H({},"__esModule",{value:!0}),v);var z={};U(z,{default:()=>R});module.exports=V(z);var k=require("obsidian");var P={preset:"grid",imageProperty:"cover",imageHeight:"200px",imageFit:"cover",properties:"all",exclude:[],scrollableProperties:!1,contentHeight:"200px",showLabels:!0,cardSpacing:16,enableShadows:!0,propertiesAlign:"left",titleAlign:"left",fontSize:"default",truncateText:!1,booleanDisplayMode:"both",showBooleanLabels:!0,booleanTrueText:"true",booleanFalseText:"false",enableClickableCards:!1,kanbanColumnWidth:"300px",kanbanColumnSpacing:16,kanbanStatusOrder:["todo","in-progress","review","done"],kanbanHideEmptyColumns:!1,kanbanShowColumnCounts:!0,kanbanCompactCards:!1,kanbanMobileStackColumns:!1,kanbanStatusOptions:["todo","in-progress","review","done"],kanbanColors:{todo:"gray","in-progress":"blue",review:"orange",done:"green"},newTaskPath:"",newTaskTemplate:{priority:"",assignee:"",due:""},defaultDateFormat:"YYYY-MM-DD",propertyFormatters:{},mobileColumns:1,mobilePreset:"grid",mobileImageHeight:"150px",mobileScrollableProperties:!0,mobileContentHeight:"150px",forceMobileMode:!1,enableLazyLoading:!1,enableDynamicUpdates:!1,refreshDelay:2500,showRefreshButton:!0,debugMode:!1,showFileAsTitle:!0,dynamicColumns:!1,minCardWidth:"250px"};var m=require("obsidian"),M=class extends m.PluginSettingTab{constructor(a,e){super(a,e),this.plugin=e}display(){let{containerEl:a}=this;a.empty(),new m.Setting(a).setName("Settings reference").setDesc("Open the complete settings reference guide on the website.").addButton(c=>c.setButtonText("Open reference website").setCta().onClick(()=>{window.open("https://sophokles187.github.io/data-cards/#/settings-reference","_blank")})),new m.Setting(a).setName("Presets").setHeading(),new m.Setting(a).setName("Default preset").setDesc("Choose the default preset for cards").addDropdown(c=>c.addOption("grid","Grid (balanced, 3 columns)").addOption("portrait","Portrait (optimized for book covers, 3 columns)").addOption("square","Square (1:1 cards with minimal text, 4 columns)").addOption("compact","Compact (side-by-side layout, 4 columns)").addOption("dense","Dense (maximum density, 6 columns)").addOption("kanban","Kanban (horizontal columns for grouped data)").setValue(this.plugin.settings.preset).onChange(async g=>{this.plugin.settings.preset=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Images").setHeading(),new m.Setting(a).setName("Default image property").setDesc("The frontmatter property to use for images").addText(c=>c.setPlaceholder("cover").setValue(this.plugin.settings.imageProperty).onChange(async g=>{this.plugin.settings.imageProperty=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Display").setHeading(),new m.Setting(a).setName("Show property labels").setDesc("Show labels for properties").addToggle(c=>c.setValue(this.plugin.settings.showLabels).onChange(async g=>{this.plugin.settings.showLabels=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Card spacing").setDesc("Space between cards (in pixels)").addSlider(c=>c.setLimits(0,32,4).setValue(this.plugin.settings.cardSpacing).setDynamicTooltip().onChange(async g=>{this.plugin.settings.cardSpacing=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Enable card shadows").setDesc("Add subtle shadows to cards for a more three-dimensional appearance").addToggle(c=>c.setValue(this.plugin.settings.enableShadows).onChange(async g=>{this.plugin.settings.enableShadows=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Dynamic columns").setDesc("Automatically adjust the number of columns based on container width instead of using fixed columns").addToggle(c=>c.setValue(this.plugin.settings.dynamicColumns).onChange(async g=>{this.plugin.settings.dynamicColumns=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Minimum card width").setDesc("Minimum width for cards when using dynamic columns (e.g., 250px, 300px)").addText(c=>c.setPlaceholder("250px").setValue(this.plugin.settings.minCardWidth).onChange(async g=>{this.plugin.settings.minCardWidth=g||"250px",await this.plugin.saveSettings()})),new m.Setting(a).setName("Properties alignment").setDesc("Text alignment for properties and their labels").addDropdown(c=>c.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.propertiesAlign).onChange(async g=>{this.plugin.settings.propertiesAlign=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Title alignment").setDesc("Text alignment for the title (filename)").addDropdown(c=>c.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.titleAlign).onChange(async g=>{this.plugin.settings.titleAlign=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Show file as title").setDesc("When using TABLE WITHOUT ID, show the file name as the card title").addToggle(c=>c.setValue(this.plugin.settings.showFileAsTitle).onChange(async g=>{this.plugin.settings.showFileAsTitle=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Font size").setDesc("Text size for all card elements (properties, labels, and title)").addDropdown(c=>c.addOption("larger","Larger (120%)").addOption("large","Large (110%)").addOption("default","Default (100%)").addOption("small","Small (90% - similar to dense preset)").addOption("smaller","Smaller (80%)").setValue(this.plugin.settings.fontSize).onChange(async g=>{this.plugin.settings.fontSize=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Truncate long text").setDesc("Add ellipsis (...) to property values that are too long to fit on one line").addToggle(c=>c.setValue(this.plugin.settings.truncateText).onChange(async g=>{this.plugin.settings.truncateText=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Card content").setHeading(),new m.Setting(a).setName("Scrollable properties").setDesc("Enable scrolling for card properties when they exceed the content height (Note: Square and Compact presets are scrollable by default)").addToggle(c=>c.setValue(this.plugin.settings.scrollableProperties).onChange(async g=>{this.plugin.settings.scrollableProperties=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Card interaction").setHeading(),new m.Setting(a).setName("Enable clickable cards").setDesc("Make the entire card clickable to open the note (not just the title)").addToggle(c=>c.setValue(this.plugin.settings.enableClickableCards).onChange(async g=>{this.plugin.settings.enableClickableCards=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Content height").setDesc("Height of the scrollable content area (e.g., 200px)").addText(c=>c.setPlaceholder("200px").setValue(this.plugin.settings.contentHeight).onChange(async g=>{this.plugin.settings.contentHeight=g||"200px",await this.plugin.saveSettings()})),new m.Setting(a).setName("Formatting").setHeading(),new m.Setting(a).setName("Default date format").setDesc("Format for displaying dates (YYYY = year, MM = month, DD = day)").addText(c=>c.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.defaultDateFormat).onChange(async g=>{this.plugin.settings.defaultDateFormat=g||"YYYY-MM-DD",await this.plugin.saveSettings()})),new m.Setting(a).setName("Boolean display").setHeading(),new m.Setting(a).setName("Boolean display mode").setDesc("How to display boolean values in cards").addDropdown(c=>c.addOption("both","Both checkbox and text").addOption("checkbox","Checkbox only").addOption("text","Text only").setValue(this.plugin.settings.booleanDisplayMode).onChange(async g=>{this.plugin.settings.booleanDisplayMode=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Show boolean labels").setDesc("Show text labels for boolean values").addToggle(c=>c.setValue(this.plugin.settings.showBooleanLabels).onChange(async g=>{this.plugin.settings.showBooleanLabels=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("True text").setDesc("Custom text to display for true values").addText(c=>c.setPlaceholder("true").setValue(this.plugin.settings.booleanTrueText).onChange(async g=>{this.plugin.settings.booleanTrueText=g||"true",await this.plugin.saveSettings()})),new m.Setting(a).setName("False text").setDesc("Custom text to display for false values").addText(c=>c.setPlaceholder("false").setValue(this.plugin.settings.booleanFalseText).onChange(async g=>{this.plugin.settings.booleanFalseText=g||"false",await this.plugin.saveSettings()})),new m.Setting(a).setName("Per-card boolean settings").setDesc("Individual cards can override these settings in their code block settings").setDisabled(!0),new m.Setting(a).setName("Mobile").setHeading(),new m.Setting(a).setName("Mobile preset").setDesc("Preset to use on mobile devices").addDropdown(c=>c.addOption("grid","Grid (balanced)").addOption("portrait","Portrait (optimized for book covers)").addOption("square","Square (1:1 cards with minimal text)").addOption("compact","Compact (side-by-side layout)").addOption("dense","Dense (maximum density)").addOption("kanban","Kanban (horizontal columns)").setValue(this.plugin.settings.mobilePreset).onChange(async g=>{this.plugin.settings.mobilePreset=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Mobile columns").setDesc("Number of columns to use on mobile devices (default: 1)").addSlider(c=>c.setLimits(1,3,1).setValue(this.plugin.settings.mobileColumns).setDynamicTooltip().onChange(async g=>{this.plugin.settings.mobileColumns=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Mobile scrollable properties").setDesc("Enable scrolling for card properties on mobile devices").addToggle(c=>c.setValue(this.plugin.settings.mobileScrollableProperties).onChange(async g=>{this.plugin.settings.mobileScrollableProperties=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Mobile content height").setDesc("Height of the scrollable content area on mobile devices").addText(c=>c.setPlaceholder("150px").setValue(this.plugin.settings.mobileContentHeight).onChange(async g=>{this.plugin.settings.mobileContentHeight=g||"150px",await this.plugin.saveSettings()})),new m.Setting(a).setName("Force mobile mode").setDesc("Force the plugin to use mobile settings even on desktop (for testing)").addToggle(c=>c.setValue(this.plugin.settings.forceMobileMode).onChange(async g=>{this.plugin.settings.forceMobileMode=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Kanban").setHeading(),new m.Setting(a).setName("Column width").setDesc("Width of kanban columns (e.g., 300px, 250px)").addText(c=>c.setPlaceholder("300px").setValue(this.plugin.settings.kanbanColumnWidth).onChange(async g=>{this.plugin.settings.kanbanColumnWidth=g||"300px",await this.plugin.saveSettings()})),new m.Setting(a).setName("Column spacing").setDesc("Space between kanban columns (in pixels)").addSlider(c=>c.setLimits(8,32,4).setValue(this.plugin.settings.kanbanColumnSpacing).setDynamicTooltip().onChange(async g=>{this.plugin.settings.kanbanColumnSpacing=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Show column counts").setDesc("Display the number of cards in each kanban column header").addToggle(c=>c.setValue(this.plugin.settings.kanbanShowColumnCounts).onChange(async g=>{this.plugin.settings.kanbanShowColumnCounts=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Hide empty columns").setDesc("Hide kanban columns that contain no cards").addToggle(c=>c.setValue(this.plugin.settings.kanbanHideEmptyColumns).onChange(async g=>{this.plugin.settings.kanbanHideEmptyColumns=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Compact cards").setDesc("Use smaller cards in kanban mode for higher density").addToggle(c=>c.setValue(this.plugin.settings.kanbanCompactCards).onChange(async g=>{this.plugin.settings.kanbanCompactCards=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Mobile: Stack columns").setDesc("Stack kanban columns vertically on mobile devices instead of horizontal scrolling").addToggle(c=>c.setValue(this.plugin.settings.kanbanMobileStackColumns).onChange(async g=>{this.plugin.settings.kanbanMobileStackColumns=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Performance").setHeading(),new m.Setting(a).setName("Enable lazy loading").setDesc("Only load images when they become visible (improves performance with many cards)").addToggle(c=>c.setValue(this.plugin.settings.enableLazyLoading).onChange(async g=>{this.plugin.settings.enableLazyLoading=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Updates").setHeading(),new m.Setting(a).setName("Show refresh button").setDesc("Display a refresh button on each card container that appears on hover. Click it to update cards when your data changes.").addToggle(c=>c.setValue(this.plugin.settings.showRefreshButton).onChange(async g=>{this.plugin.settings.showRefreshButton=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Advanced (Experimental)").setHeading(),new m.Setting(a).setName("Enable dynamic updates").setDesc("\u26A0\uFE0F Legacy feature - may be unreliable. Automatically update DataCards when properties change. The refresh button is recommended instead.").addToggle(c=>c.setValue(this.plugin.settings.enableDynamicUpdates).onChange(async g=>{this.plugin.settings.enableDynamicUpdates=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Refresh delay").setDesc("Delay in milliseconds before refreshing after a property change (only applies to dynamic updates)").addSlider(c=>c.setLimits(500,5e3,500).setValue(this.plugin.settings.refreshDelay).setDynamicTooltip().onChange(async g=>{this.plugin.settings.refreshDelay=g,await this.plugin.saveSettings()})).addExtraButton(c=>c.setIcon("reset").setTooltip("Reset to default (2500ms)").onClick(async()=>{this.plugin.settings.refreshDelay=2500,await this.plugin.saveSettings(),this.display()})),new m.Setting(a).setName("Per-card dynamic updates").setDesc('Individual cards can override the global setting with "dynamicUpdate: true/false" in their settings').setDisabled(!0),new m.Setting(a).setName("Developer").setHeading(),new m.Setting(a).setName("Debug mode").setDesc("Enable debug logging (only use during development or troubleshooting)").addToggle(c=>c.setValue(this.plugin.settings.debugMode).onChange(async g=>{this.plugin.settings.debugMode=g,await this.plugin.saveSettings()})),new m.Setting(a).setName("Help").setHeading();let e=a.createEl("div"),t=e.createEl("p"),n=t.createEl("strong",{text:"Basic Usage:"});t.createEl("br"),t.appendText("Use the "),t.createEl("code",{text:"datacards"}),t.appendText(" code block to create card layouts from Dataview queries."),e.createEl("p").createEl("strong",{text:"Example:"}),e.createEl("pre").createEl("code").setText(`\`\`\`datacards
TABLE title, author, rating, cover FROM #books
SORT rating DESC

// Settings
preset: grid
imageFit: contain
defaultDateFormat: YYYY
\`\`\``);let l=e.createEl("p");l.createEl("strong",{text:"Important:"}),l.appendText(" You must explicitly include all properties you want to display in your Dataview query (including the image property).");let d=e.createEl("p");d.createEl("strong",{text:"Image Support:"}),d.createEl("br"),d.appendText("The plugin supports external URLs, vault images, and wiki links:"),d.createEl("br"),d.createEl("code",{text:"cover: https://example.com/image.jpg"}),d.appendText(" or "),d.createEl("code",{text:"cover: [[path/to/image.jpg]]"});let u=e.createEl("p");u.createEl("strong",{text:"Tip:"}),u.appendText(' Data Cards works best with the Editor-Setting "Readable line length" disabled.'),e.createEl("br");let h=e.createEl("p").createEl("a",{text:"View documentation homepage",href:"https://sophokles187.github.io/data-cards/#/"});h.setAttribute("target","_blank"),h.setAttribute("rel","noopener")}};var r=class{static setDebugMode(a){this.debugMode=a}static error(a,...e){console.error(`[DataCards] ${a}`,...e)}static warn(a,...e){console.warn(`[DataCards] ${a}`,...e)}static debug(a,...e){this.debugMode&&console.log(`[DataCards] ${a}`,...e)}};r.debugMode=!1;var A=class{parseDataCardsBlock(a){r.debug("Parsing datacards block");let e=/\n-{3,}\n|\n\/\/\s*Settings.*|\n\/\*\s*Settings\s*\*\/.*/,t=a.match(e),n=/^\/\/\s*Settings.*/,i=a.match(n),s,o;t&&t.index!==void 0?(r.debug("Found settings separator at index:",t.index),s=a.substring(0,t.index).trim(),o=a.substring(t.index+t[0].length).trim()):i?(r.debug("Block starts with settings marker"),s="",o=a.substring(i[0].length).trim()):(r.debug("No settings separator found"),s=a.trim(),o=""),r.debug("Extracted query:",s),s=this.ensureQueryType(s);let l=this.parseSettings(o),d=this.extractColumnAliases(s);return d.length>0&&(l.columnAliases=d,r.debug("Extracted column aliases:",d)),{query:s,settings:l}}extractColumnAliases(a){let e=[];if(!a.trim().toUpperCase().startsWith("TABLE"))return e;try{let t=a.match(/TABLE\s+(without\s+id\s+)?([\s\S]*?)(?:\s+FROM|\s+WHERE|\s+SORT|\s+GROUP BY|\s+LIMIT|\s+FLATTEN|$)/i);if(!t||!t[2])return e;let n=t[2].trim();if(r.debug("Extracted columns text:",n),!n)return e;let i=this.splitColumnsPreservingExpressions(n);for(let s of i){let o=s.match(/^(.*?)\s+as\s+(?:"([^"]+)"|'([^']+)'|([^\s,]+))$/i);if(o){let l=o[1].trim(),d=o[2]||o[3]||o[4],u=l;if(/^[a-zA-Z0-9_.-]+$/.test(l))u=l;else{let p=l.match(/\(\s*".*?"\s*\+\s*([a-zA-Z0-9_.-]+)\s*\+\s*".*?"\s*\)/);p&&p[1]&&(u=p[1],r.debug(`Extracted field name from complex expression: ${u}`))}e.push({original:u,alias:d,expression:l}),r.debug(`Found column alias: ${u} as "${d}"`)}}}catch(t){r.error("Error extracting column aliases:",t)}return e}splitColumnsPreservingExpressions(a){let e=[],t="",n=0,i=!1,s=!1;for(let o=0;o<a.length;o++){let l=a[o];if(l==='"'&&!s?i=!i:l==="'"&&!i&&(s=!s),!i&&!s&&(l==="("?n++:l===")"&&n--),l===","&&n===0&&!i&&!s){e.push(t.trim()),t="";continue}t+=l}return t.trim()&&e.push(t.trim()),e}ensureQueryType(a){if(!/\b(TABLE|LIST|TASK|CALENDAR)\b/i.test(a)){let t=a.split(`
`),n=-1;for(let i=0;i<t.length;i++){let s=t[i].trim();if(s&&!s.startsWith("//")&&!s.startsWith("/*")){n=i;break}}if(n>=0){let i=this.parseSettings(t.slice(n+1).join(`
`)),s="",o=[];return i.imageProperty&&o.push(i.imageProperty),s="",r.debug("Using simple TABLE query without property list"),s.trim()===""?t[n]="TABLE "+t[n]:t[n]="TABLE"+s+" "+t[n],t.join(`
`)}else return"TABLE "+a}return a}parseSettings(a){if(!a)return{};let e={},t=a.split(`
`);r.debug("Parsing settings from text");for(let n of t){if(n.trim().startsWith("//")||n.trim().startsWith("/*")||!n.trim())continue;let i=n.match(/^\s*([a-zA-Z0-9_]+)\s*:\s*(.+)\s*$/);if(i){let[,s,o]=i;if(r.debug(`Found setting: ${s} = ${o}`),s==="properties"&&o.trim().startsWith("[")&&o.trim().endsWith("]")){r.debug("Detected properties array");let l=o.substring(1,o.length-1).trim();if(l){let d=l.split(",").map(u=>u.trim());e[s]=d}else e[s]=[]}else s==="defaultDateFormat"?e[s]=o.trim():s==="dynamicUpdate"?(e[s]=this.parseValue(o.trim()),r.debug(`Parsed dynamicUpdate setting: ${e[s]}`)):e[s]=this.parseValue(o.trim())}}return e}parseValue(a){r.debug("Parsing value:",a);try{return JSON.parse(a)}catch(e){}if(a.startsWith("[")&&a.endsWith("]")){r.debug("Detected array syntax");let e=a.substring(1,a.length-1).trim();return e?e.split(",").map(n=>n.trim()):[]}return/^-?\d+(\.\d+)?$/.test(a)?Number(a):a.toLowerCase()==="true"?!0:a.toLowerCase()==="false"?!1:a}};var w=require("obsidian");var L=class{constructor(a,e){this.currentSettings=null;this.currentQuery=null;this.app=a,this.pluginSettings=e}updateSettings(a){this.pluginSettings=a}setCurrentQuery(a){this.currentQuery=a}isMobileDevice(){return w.Platform.isMobile||this.pluginSettings.forceMobileMode}renderCards(a,e,t,n){r.debug("SPECIAL CHECK - renderCards called with results:",e);let i=!1;e&&e.values&&Array.isArray(e.values)&&e.values.length===0?(r.debug("Empty table detected in renderCards"),i=!0):Array.isArray(e)&&e.length===0?(r.debug("Empty array detected in renderCards"),i=!0):e&&typeof e=="object"&&!Array.isArray(e)&&Object.keys(e).length===2&&(r.debug("Object with exactly 2 keys detected in renderCards:",Object.keys(e)),i=!0);let s=this.isMobileDevice();r.debug("Is mobile device:",s);let o={...this.pluginSettings};if(r.debug("Initial settings from plugin:",{preset:o.preset,imageHeight:o.imageHeight,mobileColumns:o.mobileColumns,mobilePreset:o.mobilePreset,mobileImageHeight:o.mobileImageHeight}),o={...o,...t},r.debug("After applying block settings:",{preset:o.preset,imageHeight:o.imageHeight,mobileColumns:o.mobileColumns,mobilePreset:o.mobilePreset,mobileImageHeight:o.mobileImageHeight}),s&&(r.debug("Applying mobile settings..."),r.debug(`Using mobile columns: ${o.mobileColumns}`),o.mobilePreset!==void 0&&(r.debug(`Overriding preset: ${o.preset} with mobilePreset: ${o.mobilePreset}`),o.preset=o.mobilePreset),o.mobileImageHeight!==void 0&&(r.debug(`Overriding imageHeight: ${o.imageHeight} with mobileImageHeight: ${o.mobileImageHeight}`),o.imageHeight=o.mobileImageHeight),r.debug("Final settings after applying mobile settings:",{preset:o.preset,imageHeight:o.imageHeight})),this.currentSettings=o,i){r.debug("Rendering empty state from renderCards"),this.renderEmptyState(a,"No notes found");return}let l=a.createEl("div",{cls:"datacards-container",attr:{"data-datacards-container":"true"}});o.showRefreshButton&&this.addRefreshButton(l),l.addClass(`datacards-preset-${o.preset}`),o.enableShadows||l.addClass("datacards-no-shadows"),o.truncateText&&l.addClass("datacards-truncate-text"),o.fontSize&&o.fontSize!=="default"?(l.addClass(`datacards-font-${o.fontSize}`),r.debug(`Applied font size class: datacards-font-${o.fontSize}`)):o.preset==="dense"&&(!o.fontSize||o.fontSize==="default")&&(l.addClass("datacards-font-small"),r.debug("Applied small font size for dense preset")),l.setAttribute("data-card-gap",`${o.cardSpacing}`);let d=!1;if(s)d=!1,r.debug("Mobile device detected, forcing fixed columns");else{let h=t.columns!==void 0,c=t.dynamicColumns!==void 0;h?(d=!1,r.debug("Per-block columns setting detected, using fixed columns")):c?(d=t.dynamicColumns,r.debug(`Per-block dynamicColumns setting detected: ${d}`)):(d=this.pluginSettings.dynamicColumns,r.debug(`Using global dynamicColumns setting: ${d}`))}if(d){r.debug("Using dynamic columns layout"),l.addClass("datacards-dynamic-columns");let c=o.minCardWidth||"250px";(typeof c=="number"||/^\d+$/.test(c))&&(c=`${c}px`),l.setAttribute("data-min-card-width",c),l.style.setProperty("--min-card-width",c);let g=c.replace("px","");["200","220","250","280","300","320","350","400"].includes(g)&&l.addClass(`datacards-min-width-${g}`),r.debug(`Using dynamic columns with min card width: ${c}`)}else{let h;if(s)h=o.mobileColumns;else{let c=3;o.preset==="dense"?c=6:o.preset==="compact"||o.preset==="square"?c=4:o.preset==="portrait"&&(c=3),h=o.columns!==void 0?o.columns:c}r.debug(`Using ${h} fixed columns`),l.setAttribute("data-columns",h.toString()),l.style.setProperty("--card-columns",h.toString()),h>=1&&h<=6&&l.addClass(`datacards-columns-${h}`)}let u;o.preset==="portrait"?u="350px":o.preset==="square"||o.preset==="compact"?u="200px":o.preset==="dense"?u="120px":u="200px",o.imageHeight!==void 0&&(u=o.imageHeight),(typeof u=="number"||/^\d+$/.test(u))&&(u=`${u}px`),l.setAttribute("data-image-height",u),l.addClass(`datacards-image-height-${u.replace("px","")}`);let p;if(p=o.preset==="portrait"?"contain":"cover",o.imageFit!==void 0&&(p=o.imageFit),l.setAttribute("data-image-fit",p),l.addClass(`datacards-image-fit-${p}`),this.isGroupByResults(e))if(r.debug("Detected GROUP BY results"),o.preset==="kanban")if(r.debug("Rendering GROUP BY results as kanban"),e.idMeaning)this.renderDataviewTableGroupByKanban(l,e,o,n);else if(e.primaryMeaning)this.renderDataviewListGroupByKanban(l,e,o,n);else{let h=Array.isArray(e)?e:e.values;this.renderGroupedResults(l,h,o,n)}else{r.debug("Rendering GROUP BY results as grouped cards");let h=Array.isArray(e)?e:e.values;this.renderGroupedResults(l,h,o,n)}else e&&e.values&&Array.isArray(e.values)?(r.debug("Detected table-like results with values array"),o.preset==="kanban"&&e.headers&&Array.isArray(e.headers)?(r.debug("Rendering regular query results as kanban (programmatic grouping)"),this.renderProgrammaticKanban(l,e,o,n)):e.headers&&Array.isArray(e.headers)?this.renderTableResults(l,e,o,n):(r.debug("Table results missing headers, treating as array results"),this.renderArrayResults(l,e.values,o,n))):e&&Array.isArray(e)?(r.debug("Detected array results"),this.renderArrayResults(l,e,o,n)):e&&typeof e=="object"?(r.debug("Detected object results"),this.renderObjectResults(l,e,o,n)):(r.debug("No valid results detected"),this.renderError(l,"No results or unsupported result type"))}renderError(a,e){a.createEl("div",{cls:"datacards-error",text:e})}addRefreshButton(a){let e=a.createEl("button",{cls:"datacards-refresh-button",attr:{"aria-label":"Refresh DataCards"}});e.createEl("span",{cls:"datacards-refresh-icon",text:"\u21BB"}),e.addEventListener("click",t=>{t.preventDefault(),t.stopPropagation(),e.addClass("datacards-refresh-active"),this.triggerRefresh(),setTimeout(()=>{e.removeClass("datacards-refresh-active")},300)})}triggerRefresh(){var e,t;let a=(t=(e=this.app.plugins)==null?void 0:e.plugins)==null?void 0:t["data-cards"];a&&typeof a.refreshActiveView=="function"?a.refreshActiveView(!1):window.dispatchEvent(new CustomEvent("datacards-refresh-requested"))}renderEmptyState(a,e="No notes found"){var n;if(r.debug("renderEmptyState called with message:",e),((n=this.currentSettings)==null?void 0:n.preset)==="kanban"){this.renderKanbanEmptyState(a);return}let t=a.createEl("div",{cls:"datacards-container",attr:{"data-datacards-container":"true"}});this.pluginSettings.showRefreshButton&&this.addRefreshButton(t),r.debug("Created cards container for empty state"),t.createEl("div",{cls:"datacards-empty-state",text:e}),r.debug("Added empty state element with class:","datacards-empty-state")}renderKanbanEmptyState(a){var i;let e=a.createEl("div",{cls:"datacards-container datacards-kanban-container datacards-kanban-empty",attr:{"data-datacards-container":"true"}});(i=this.currentSettings)!=null&&i.showRefreshButton&&this.addRefreshButton(e),this.currentSettings&&(e.style.setProperty("--kanban-column-width",this.currentSettings.kanbanColumnWidth),e.style.setProperty("--kanban-column-spacing",`${this.currentSettings.kanbanColumnSpacing}px`));let t=e.createEl("div",{cls:"datacards-kanban-empty-state"});t.createEl("h3",{cls:"datacards-kanban-empty-title",text:"No tasks found"}),t.createEl("p",{cls:"datacards-kanban-empty-description",text:"Get started by creating your first task. It will appear in the appropriate status column."}),t.createEl("button",{cls:"datacards-btn datacards-btn-primary datacards-kanban-create-first",text:"+ Create First Task"}).addEventListener("click",s=>{var l,d;s.preventDefault(),s.stopPropagation();let o=((d=(l=this.currentSettings)==null?void 0:l.kanbanStatusOptions)==null?void 0:d[0])||"todo";this.showNewTaskModal(o,this.currentSettings,new w.Component)})}renderTableResults(a,e,t,n){let{values:i,headers:s}=e;r.debug("Rendering table results:"),r.debug("- Headers:",s),r.debug("- Number of rows:",i.length),i.forEach((o,l)=>{r.debug(`Processing row ${l}`);let d=this.createCardElement(a);t.imageProperty&&o[s.indexOf(t.imageProperty)]!==void 0&&this.addImageToCard(d,o[s.indexOf(t.imageProperty)]);let u=d.createEl("div",{cls:"datacards-content"}),p=null;if(s.includes("File")||s.includes("file")){let b=s.findIndex(x=>x.toLowerCase()==="file");b>=0&&(p=o[b])}if(!p&&o.file&&(p=o.file),!p&&o.path&&(p=o.path),!p&&o.source&&(p=o.source),!p&&o.originalFile&&(p=o.originalFile),p&&t.showFileAsTitle){let b=u.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(b,p),t.enableClickableCards&&this.makeCardClickable(d,p)}else p&&t.enableClickableCards&&this.makeCardClickable(d,p);let h=u.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){h.addClass("datacards-scrollable-properties");let b=this.getContentHeight(t);h.setAttribute("data-content-height",b),h.addClass(`datacards-content-height-${b.replace("px","")}`)}let g=[];t.properties==="all"?(g=[...s],r.debug("Using all headers as properties:",g)):Array.isArray(t.properties)?(g=[...t.properties],r.debug("Using specified properties:",g)):r.debug("No properties specified, using empty array");let f=g.filter(b=>!t.exclude.includes(b)&&b!==t.imageProperty&&b.toLowerCase()!=="file");r.debug("Filtered properties (after excluding file):",f),f.forEach(b=>{if(r.debug(`Checking property '${b}' in headers:`,s.includes(b)),s.includes(b)){let x=s.indexOf(b),C=o[x];r.debug(`Property '${b}' value:`,C),r.debug(`Property '${b}' type:`,typeof C),this.addPropertyToCard(h,b,C,t,n)}else r.debug(`Property '${b}' not found in headers`)}),f.length===0&&!s.some(b=>b.toLowerCase()==="file")&&(r.debug("No properties were added to the card"),u.createEl("div",{cls:"datacards-property",text:"No properties to display"}))})}renderArrayResults(a,e,t,n){e.forEach(i=>{let s=this.createCardElement(a);t.imageProperty&&i[t.imageProperty]&&this.addImageToCard(s,i[t.imageProperty]);let o=s.createEl("div",{cls:"datacards-content"}),l=null;if("file"in i&&(l=i.file),!l&&"path"in i&&(l=i.path),l){let g=o.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(g,l),t.enableClickableCards&&this.makeCardClickable(s,l)}let d=o.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){d.addClass("datacards-scrollable-properties");let g=this.getContentHeight(t);d.setAttribute("data-content-height",g),d.addClass(`datacards-content-height-${g.replace("px","")}`)}let p=Object.keys(i);(t.properties==="all"?p:Array.isArray(t.properties)?t.properties:[]).filter(g=>!t.exclude.includes(g)&&g!==t.imageProperty&&g.toLowerCase()!=="file").forEach(g=>{g in i&&this.addPropertyToCard(d,g,i[g],t,n)})})}renderObjectResults(a,e,t,n){let i=this.createCardElement(a);t.imageProperty&&e[t.imageProperty]&&this.addImageToCard(i,e[t.imageProperty]);let s=i.createEl("div",{cls:"datacards-content"});if("file"in e){let h=s.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(h,e.file),t.enableClickableCards&&this.makeCardClickable(i,e.file)}let o=s.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){o.addClass("datacards-scrollable-properties");let h=this.getContentHeight(t);o.setAttribute("data-content-height",h),o.addClass(`datacards-content-height-${h.replace("px","")}`)}let d=Object.keys(e);(t.properties==="all"?d:Array.isArray(t.properties)?t.properties:[]).filter(h=>!t.exclude.includes(h)&&h!==t.imageProperty&&h.toLowerCase()!=="file").forEach(h=>{h in e&&this.addPropertyToCard(o,h,e[h],t,n)})}createCardElement(a){var t;let e=a.createEl("div",{cls:"datacards-card"});return(t=this.currentSettings)!=null&&t.enableClickableCards&&e.addClass("datacards-clickable-card"),e}makeCardClickable(a,e){if(!e)return;let t;if(typeof e=="object"&&e!==null?"path"in e?t=e.path:"link"in e?t=e.link:t=String(e):t=String(e),t.includes("[[")&&t.includes("]]")){let n=t.match(/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/);n?t=n[1]:t=t.substring(2,t.length-2).split("|")[0]}a.addClass("datacards-clickable-card"),a.addEventListener("click",n=>{n.target.closest(".internal-link")||(this.app.workspace.openLinkText(t,"",!1,{active:!0}),n.stopPropagation())})}addImageToCard(a,e){var s;let t=a.createEl("div",{cls:"datacards-image-container"});if(Array.isArray(e))if(r.debug("Image value is an array, taking first image:",e),e.length>0)e=e[0],r.debug("Using first image from array:",e);else{r.debug("Image array is empty"),t.createEl("div",{cls:"datacards-image-placeholder",text:"No images available"});return}let n;typeof e=="object"&&e!==null?(r.debug("Image value is an object:",e),"path"in e?(n=e.path,r.debug("Extracted path from Link object:",n)):(n=String(e),r.debug("Converted object to string:",n))):(n=String(e),r.debug("Image value is a string:",n)),n=this.extractImageSource(n),r.debug("After image source extraction:",n);let i=t.createEl("div",{cls:"datacards-image-placeholder",text:"Loading image..."});(s=this.currentSettings)!=null&&s.enableLazyLoading?this.lazyLoadImage(t,i,n):this.loadImage(t,i,n).catch(o=>{r.debug("Error loading image:",o),i.setText("Error loading image")})}extractImageSource(a){if(!a||typeof a!="string")return String(a||"");let e=a.match(/!\[\[(.*?)(?:\|.*?)?\]\]/);if(e){let s=e[1];return r.debug("Extracted path from embedded wiki link:",s),`[[${s}]]`}let t=a.match(/!\[(.*?)\]\((.*?)\)/);if(t){let s=t[2];return r.debug("Extracted URL from markdown image syntax:",s),s.replace(/['",.;:]+$/,"")}let n=a.match(/\[\[(.*?)\]\]/);if(n){let s=`[[${n[1]}]]`;return r.debug("Extracted wiki link:",s),s}let i=a.match(/(https?:\/\/[^\s"'<>[\]{}]+)/);if(i){let s=i[1];return r.debug("Extracted URL:",s),s.replace(/['",.;:]+$/,"")}return a}lazyLoadImage(a,e,t){r.debug("Lazy loading image:",t),new IntersectionObserver((i,s)=>{i.forEach(o=>{o.isIntersecting&&(r.debug("Image container is now visible, loading image:",t),this.loadImage(a,e,t).catch(l=>{r.debug("Error in lazy loading image:",l),e.setText("Error loading image")}),s.disconnect())})},{rootMargin:"100px",threshold:.1}).observe(a)}async loadImage(a,e,t){let n=t.match(/!\[(.*?)\]\((.*?)\)/);if(n){let i=n[2];r.debug("Extracted URL from markdown image syntax:",i),await this.loadImage(a,e,i);return}if(t.startsWith("http")||t.startsWith("https")){r.debug("Handling as external URL:",t);let i=t.replace(/['",.;:]+$/,"");r.debug("Cleaned URL:",i),await this.loadExternalImage(a,e,i)}else if(t.startsWith("[[")&&t.endsWith("]]")){r.debug("Handling as wiki link");let i=t.substring(2,t.length-2),s=i;i.includes("|")&&(s=i.split("|")[0]);try{let o=this.app.vault.getAbstractFileByPath(s);if(o&&o instanceof w.TFile){r.debug("Found file in vault:",o);let l=this.app.vault.getResourcePath(o);r.debug("Resource path:",l);let d=a.createEl("img",{cls:"datacards-image",attr:{src:l}});d.onload=()=>{e.remove(),d.addClass("loaded")},d.onerror=()=>{e.setText("Image not found")}}else r.debug("File not found in vault or not a file:",s),e.setText("Image not found")}catch(o){r.debug("Error loading image:",o),e.setText("Error loading image")}}else{r.debug("Handling as local path");try{let i=this.app.vault.getAbstractFileByPath(t);if(i&&i instanceof w.TFile){r.debug("Found file in vault:",i);let s=this.app.vault.getResourcePath(i);r.debug("Resource path:",s);let o=a.createEl("img",{cls:"datacards-image",attr:{src:s}});o.onload=()=>{e.remove(),o.addClass("loaded")},o.onerror=()=>{e.setText("Image not found")}}else r.debug("File not found in vault:",t),e.setText("Image not found")}catch(i){r.debug("Error loading image:",i),e.setText("Error loading image")}}}async loadExternalImage(a,e,t){r.debug("Loading external image with URL:",t);let n=a.createEl("img",{cls:"datacards-image",attr:{src:t,crossorigin:"anonymous"}});n.onload=()=>{r.debug("External image loaded successfully:",t),e.remove(),n.addClass("loaded")},n.onerror=async()=>{r.debug("Failed to load external image with crossorigin attribute:",t),r.debug("Trying again without crossorigin attribute"),n.removeAttribute("crossorigin"),n.onload=()=>{r.debug("External image loaded successfully without crossorigin:",t),e.remove(),n.addClass("loaded")},n.onerror=async()=>{var i;r.debug("Failed to load external image without crossorigin:",t),r.debug("Trying with requestUrl and base64 encoding:",t);try{let s=await(0,w.requestUrl)({url:t});if(s.arrayBuffer&&s.status===200){let o=this.arrayBufferToBase64(s.arrayBuffer),d=`data:${((i=s.headers)==null?void 0:i["content-type"])||"image/png"};base64,${o}`;n.src=d,n.onload=()=>{r.debug("External image loaded successfully via requestUrl and base64:",t),e.remove(),n.addClass("loaded")},n.onerror=()=>{r.debug("Failed to load image with base64 encoding:",t),e.setText("Image not found - URL: "+t)}}else throw new Error(`Failed to fetch image: ${s.status}`)}catch(s){r.debug("All attempts to load image failed:",t,s),e.setText("Image not found - URL: "+t)}}}}arrayBufferToBase64(a){let e="",t=new Uint8Array(a),n=t.byteLength;for(let i=0;i<n;i++)e+=String.fromCharCode(t[i]);return window.btoa(e)}addPropertyToCard(a,e,t,n,i,s){r.debug(`Adding property to card: ${e} = ${t}`),r.debug(`Property type: ${typeof t}`);let o=a.createEl("div",{cls:"datacards-property"});n.propertiesAlign&&o.addClass(`datacards-text-${n.propertiesAlign}`);let l=e;if(n.columnAliases){let d=n.columnAliases.find(u=>u.original===e);d&&(l=d.alias,r.debug(`Using alias "${l}" for property "${e}"`))}if(n.showLabels){let d=o.createEl("div",{cls:"datacards-property-label",text:l});n.propertiesAlign&&d.addClass(`datacards-text-${n.propertiesAlign}`)}if(e.toLowerCase()==="file")this.formatFileProperty(o,t);else if(n.preset==="kanban"&&e==="status"&&s)this.formatEditableStatusProperty(o,t,s,i);else{let d=n.propertyFormatters[e];d?this.formatPropertyWithCustomFormatter(o,t,d):this.formatPropertyByType(o,t,i)}}formatEditableStatusProperty(a,e,t,n){var l;let i=a.createEl("div",{cls:"datacards-property-value datacards-editable-status"}),s=((l=this.currentSettings)==null?void 0:l.kanbanStatusOptions)||["todo","in-progress","review","done"],o=i.createEl("select",{cls:"datacards-status-select"});s.forEach(d=>{let u=o.createEl("option",{value:d,text:d});d===String(e)&&(u.selected=!0)}),o.addEventListener("change",async d=>{let u=d.target.value;await this.updateNoteStatus(t,u)})}async updateNoteStatus(a,e){try{let t=null;if(a&&a.file){if(a.file instanceof w.TFile)t=a.file;else if(a.file.path){let s=this.app.vault.getAbstractFileByPath(a.file.path);s instanceof w.TFile&&(t=s)}}if(!t&&a&&a.path){let s=this.app.vault.getAbstractFileByPath(a.path);s instanceof w.TFile&&(t=s)}if(!t&&a&&a.filePath){let s=this.app.vault.getAbstractFileByPath(a.filePath);s instanceof w.TFile&&(t=s)}if(!t&&typeof a=="string"){let s=this.app.vault.getAbstractFileByPath(a);s instanceof w.TFile&&(t=s)}if(!t){console.error("Could not determine file from card data. Available properties:",Object.keys(a||{})),console.error("Full card data:",JSON.stringify(a,null,2));return}let n=await this.app.vault.read(t),i=this.updateFrontmatterStatus(n,e);await this.app.vault.modify(t,i),setTimeout(()=>{this.triggerRefresh()},100)}catch(t){console.error("Error updating note status:",t),console.error("Error stack:",t.stack)}}updateFrontmatterStatus(a,e){let t=/^---\n([\s\S]*?)\n---/,n=a.match(t);if(!n)return`---
status: ${e}
---

${a}`;let i=n[1],s=/^status:\s*(.*)$/m;if(i.match(s)){let o=i.replace(s,`status: ${e}`);return a.replace(t,`---
${o}
---`)}else{let o=`${i}
status: ${e}`;return a.replace(t,`---
${o}
---`)}}formatPropertyWithCustomFormatter(a,e,t){let n=a.createEl("div",{cls:"datacards-property-value"});switch(t.type){case"stars":this.formatAsStars(n,e,t.options);break;case"badge":this.formatAsBadge(n,e,t.options);break;case"progress":this.formatAsProgress(n,e,t.options);break;case"date":this.formatAsDate(n,e,t.options);break;case"tags":this.formatAsTags(n,e);break;default:n.setText(String(e))}}processRichText(a,e,t){if(typeof e!="string")return!1;r.debug("Processing rich text:",e);let n=/<([a-z][a-z0-9]*)\b[^>]*>.*?<\/\1>/i.test(e),i=n||/<[a-z][\s\S]*>/i.test(e),s=e.includes("[[");if(!s&&!i)return r.debug("Content is plain text, skipping rich text processing."),!1;if(r.debug(`Content has wiki links: ${s}, has HTML: ${i}, has complete HTML: ${n}`),n){r.debug("Rendering complete HTML elements");let l=document.createElement("div");for(l.innerHTML=e;l.firstChild;)a.appendChild(l.firstChild);return!0}let o=this.tokenizeRichText(e);return r.debug("Tokens:",o),o.forEach(l=>{l.type==="wikilink"?this.createWikiLink(a,l.content):l.type==="url"?a.createEl("a",{cls:"external-link",text:l.content,attr:{href:l.content,target:"_blank",rel:"noopener"}}):(l.type==="html"||l.type==="text")&&w.MarkdownRenderer.render(this.app,l.content,a,"",t)}),!0}tokenizeRichText(a){let e=[];if(/<([a-z][a-z0-9]*)\b[^>]*>.*?<\/\1>/i.test(a))return e.push({type:"html",content:a}),e;let n=/(\[\[.*?\]\])|(<[^>]+>|&[a-zA-Z#0-9]+;)|(https?:\/\/[^\s"'<>[\]{}]+)/g,i=0,s;for(;(s=n.exec(a))!==null;)s.index>i&&e.push({type:"text",content:a.substring(i,s.index)}),s[1]?e.push({type:"wikilink",content:s[1]}):s[2]?e.push({type:"html",content:s[2]}):s[3]&&e.push({type:"url",content:s[3]}),i=s.index+s[0].length;return i<a.length&&e.push({type:"text",content:a.substring(i)}),e}createWikiLink(a,e){var l;r.debug("Creating wiki link from text:",e);let t=/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/,n=e.match(t);if(!n){a.appendChild(document.createTextNode(e)),r.debug("Invalid wiki link format passed to createWikiLink:",e);return}let i=n[1],s=n[2]||i;r.debug(`Creating wiki link: path="${i}", display="${s}"`);let o=a.createEl("a",{cls:"internal-link",text:s,attr:{href:i,"data-href":i,"data-type":"link",target:"_blank",rel:"noopener"}});try{this.app.workspace.hoverPopover?this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:o,targetEl:o,linktext:i,sourcePath:(l=this.app.workspace.getActiveFile())==null?void 0:l.path}):r.debug("Hover popover not available, skipping hover registration.")}catch(d){r.debug("Error registering hover link:",d)}}formatPropertyByType(a,e,t){var i,s,o,l;r.debug("formatPropertyByType called with value:",e),r.debug("Value type:",typeof e),typeof e=="string"&&(r.debug("String value length:",e.length),r.debug("String value exact content:",JSON.stringify(e)));let n=a.createEl("div",{cls:"datacards-property-value"});if(a.hasClass("datacards-text-left")?n.addClass("datacards-text-left"):a.hasClass("datacards-text-center")?n.addClass("datacards-text-center"):a.hasClass("datacards-text-right")&&n.addClass("datacards-text-right"),e==null)n.setText("");else if(Array.isArray(e))r.debug("Processing array value:",e),e.forEach((d,u)=>{if(u>0&&n.appendChild(document.createTextNode(", ")),typeof d=="string"){let p=d.replace(/^["'](.*?)["']$/,"$1");r.debug(`Processing array item ${u}:`,{original:d,cleaned:p}),p.match(/^\[\[(.*?)\]\]$/)?(r.debug(`Creating wiki link from array item: ${p}`),this.createWikiLink(n,p)):this.containsUrl(p)?(r.debug(`Array item contains URLs: ${p}`),this.renderTextWithUrls(n,p)):(r.debug(`Treating array item as plain/rich text: ${p}`),this.processRichText(n,p,t)||n.appendChild(document.createTextNode(p)))}else if(typeof d=="object"&&d!==null&&"path"in d&&"type"in d&&d.type==="file"){r.debug("Handling Dataview Link object within array:",d);let p=d.path,h=d.display||this.getCleanFilename(p);this.createWikiLink(n,`[[${p}|${h}]]`)}else r.debug(`Treating array item as other type: ${d}`),n.appendChild(document.createTextNode(String(d)))});else if(typeof e=="boolean"){r.debug(`Formatting boolean property with value: ${e} (${typeof e})`);let d=n.createEl("div",{cls:"datacards-boolean-container"});a.hasClass("datacards-text-left")?d.addClass("datacards-text-left"):a.hasClass("datacards-text-center")?d.addClass("datacards-text-center"):a.hasClass("datacards-text-right")&&d.addClass("datacards-text-right");let u=((i=this.currentSettings)==null?void 0:i.booleanDisplayMode)||"both",p=((s=this.currentSettings)==null?void 0:s.showBooleanLabels)!==!1,h=((o=this.currentSettings)==null?void 0:o.booleanTrueText)||"true",c=((l=this.currentSettings)==null?void 0:l.booleanFalseText)||"false";if((u==="both"||u==="text")&&p){if(u==="text"){let g=d.createEl("input",{cls:"datacards-checkbox datacards-hidden-checkbox",attr:{type:"checkbox",disabled:"disabled","data-boolean-value":e.toString()}});g.checked=e}d.createEl("span",{cls:"datacards-boolean-text",text:e?h:c})}if(u==="both"||u==="checkbox"){let g=d.createEl("input",{cls:"datacards-checkbox",attr:{type:"checkbox",disabled:"disabled","data-boolean-value":e.toString()}});g.checked=e,r.debug(`Created checkbox with checked=${e}, data-boolean-value=${e.toString()}`)}}else if(typeof e=="number")n.setText(e.toString());else if(e instanceof Date)this.formatAsDate(n,e);else if(typeof e=="string"){if(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2}$/.test(e)||/^\d{4}-\d{2}-\d{2}$/.test(e)){let p=new Date(e);if(!isNaN(p.getTime())){this.formatAsDate(n,p);return}}if(this.processRichText(n,e,t))return;let u=e.match(/!\[(.*?)\]\((.*?)\)/);if(u){r.debug("Found markdown image in property value (fallback)");let p=u[2],h=u[1];n.addClass("loading");let c=n.createEl("img",{cls:"datacards-property-image loading",attr:{src:p,alt:h||"Image",crossorigin:"anonymous"}});c.onload=()=>{r.debug("Property image loaded successfully:",p),c.removeClass("loading")},c.onerror=()=>{r.debug("Failed to load property image:",p),c.remove(),n.removeClass("loading"),n.addClass("image-error"),n.setText("Image not found: "+p)};return}if(e.startsWith("#")){n.createEl("a",{cls:"datacards-tag tag-link",text:e,attr:{href:e,"data-href":e,"data-type":"tag"}});return}this.containsUrl(e)?(r.debug("Text contains URLs, converting to clickable links:",e),this.renderTextWithUrls(n,e)):(r.debug("Treating value as plain text:",e),n.setText(e))}else if(typeof e=="object"&&e!==null){if("path"in e&&"type"in e&&e.type==="file"){r.debug("Handling Dataview Link object:",e);let d=e.path,u=e.display||this.getCleanFilename(d);r.debug(`Creating link from Dataview Link object: path="${d}", display="${u}"`),this.createWikiLink(n,`[[${d}|${u}]]`);return}if("ts"in e&&typeof e.ts=="number"){let d=new Date(e.ts);if(!isNaN(d.getTime())){this.formatAsDate(n,d);return}}n.setText(String(e))}else n.setText(String(e))}formatAsStars(a,e,t){let n=(t==null?void 0:t.max)||5,i="\u2605",s="\u2606",o=a.createEl("div",{cls:"datacards-stars"}),l=Math.min(Math.max(0,e),n);for(let d=0;d<l;d++)o.createEl("span",{cls:"datacards-star datacards-star-full",text:i});for(let d=l;d<n;d++)o.createEl("span",{cls:"datacards-star datacards-star-empty",text:s})}formatAsBadge(a,e,t){let n=a.createEl("span",{cls:"datacards-badge",text:e});if(t!=null&&t.color){let i={red:"datacards-badge-red",green:"datacards-badge-green",blue:"datacards-badge-blue",yellow:"datacards-badge-yellow",purple:"datacards-badge-purple",orange:"datacards-badge-orange",pink:"datacards-badge-pink",gray:"datacards-badge-gray"};t.color.toLowerCase()in i?n.addClass(i[t.color.toLowerCase()]):n.setAttribute("data-color",t.color)}else n.addClass("datacards-badge-default")}formatAsProgress(a,e,t){let n=(t==null?void 0:t.max)||100,i=Math.min(Math.max(0,e),n)/n*100,s=a.createEl("div",{cls:"datacards-progress-container"}),o=`datacards-progress-width-${Math.round(i/10)*10}`,l=s.createEl("div",{cls:`datacards-progress-bar ${o}`}),d=Math.round(i/5)*5;l.setAttribute("data-percentage",`${d}`),t!=null&&t.showText&&s.createEl("span",{cls:"datacards-progress-text",text:`${Math.round(i)}%`})}formatAsDate(a,e,t){let n=typeof e=="string"?new Date(e):e;if(isNaN(n.getTime())){a.setText(String(e));return}let i=(t==null?void 0:t.format)||(this.currentSettings?this.currentSettings.defaultDateFormat:P.defaultDateFormat),s=n.getFullYear(),o=n.getMonth()+1,l=n.getDate(),d=["January","February","March","April","May","June","July","August","September","October","November","December"],u=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],p=i;p=p.replace(/YYYY/g,s.toString()).replace(/MMMM/g,d[o-1]).replace(/MMM/g,u[o-1]).replace(/MM/g,o.toString().padStart(2,"0")).replace(/DD/g,l.toString().padStart(2,"0")).replace(/YY/g,s.toString().slice(-2)).replace(/\bM\b/g,o.toString()).replace(/\bD\b/g,l.toString()),a.setText(p)}formatFileProperty(a,e){var i;let t=a.createEl("div",{cls:"datacards-property-value datacards-file-property"});if((i=this.currentSettings)!=null&&i.titleAlign?t.addClass(`datacards-text-${this.currentSettings.titleAlign}`):a.hasClass("datacards-text-left")?t.addClass("datacards-text-left"):a.hasClass("datacards-text-center")?t.addClass("datacards-text-center"):a.hasClass("datacards-text-right")&&t.addClass("datacards-text-right"),e==null){t.setText("");return}let n;if(typeof e=="object"&&e!==null?"path"in e?n=e.path:"link"in e?n=e.link:n=String(e):n=String(e),n=this.extractImageSource(n),r.debug("File property after image source extraction:",n),typeof e=="string"&&e.includes("[[")&&e.includes("|")&&e.includes("]]")){r.debug("Found wiki link with pipe character:",e);let s=e.match(/\[\[.*\|(.*?)\]\]/);if(s&&s[1]){r.debug("Extracted display text:",s[1]);let o=e.match(/\[\[(.*?)\|(.*?)\]\]/);if(o){let l=o[1],d=o[2];r.debug(`Creating link from pipe syntax - path: "${l}", display: "${d}"`);let u=t.createEl("a",{cls:"internal-link datacards-file-link",text:d,attr:{href:l,"data-href":l,"data-type":"link"}});r.debug("Created link element for pipe syntax:",u);try{this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:u,targetEl:u,linktext:l})}catch(p){}return}else{r.debug("Fallback to text only for pipe syntax"),t.setText(s[1]);return}}}if(n.includes("[[")&&n.includes("]]")){r.debug("Found wiki link in file property:",n);let s=n.match(/\[\[([^\]]+)\]\]/);if(s){let o=s[1],l=o,d=o;if(o.includes("|")){let u=o.split("|");d=u[0],l=u[1]}else l=this.getCleanFilename(d);t.createEl("a",{cls:"internal-link datacards-file-link",text:l,attr:{href:d,"data-href":d,"data-type":"link"}})}}else if(n.startsWith("[[")&&n.endsWith("]]")){let s=n.substring(2,n.length-2),o=s,l=s;if(s.includes("|")){let d=s.split("|");l=d[0],o=d[1]}else o=this.getCleanFilename(l);t.createEl("a",{cls:"internal-link datacards-file-link",text:o,attr:{href:l,"data-href":l,"data-type":"link"}})}else{let s=this.getCleanFilename(n);t.createEl("a",{cls:"internal-link datacards-file-link",text:s,attr:{href:n,"data-href":n,"data-type":"link"}})}}getCleanFilename(a){let e=a;return e.includes("/")&&(e=e.split("/").pop()||e),e.endsWith(".md")&&(e=e.substring(0,e.length-3)),e}formatAsTags(a,e){let t=a.createEl("div",{cls:"datacards-tags-container"});(Array.isArray(e)?e:[e]).forEach(i=>{let s=i.startsWith("#")?i:`#${i}`;t.createEl("a",{cls:"datacards-tag tag-link",text:s,attr:{href:s,"data-href":s,"data-type":"tag"}})})}shouldUseScrollableProperties(a){let e=!1;return(a.preset==="square"||a.preset==="compact")&&(e=!0),this.pluginSettings.scrollableProperties!==void 0&&(e=this.pluginSettings.scrollableProperties),this.isMobileDevice()&&this.pluginSettings.mobileScrollableProperties!==void 0&&(e=this.pluginSettings.mobileScrollableProperties),a.scrollableProperties!==void 0&&(e=a.scrollableProperties),e}getContentHeight(a){let e="200px";return this.pluginSettings.contentHeight&&(e=this.pluginSettings.contentHeight),this.isMobileDevice()&&this.pluginSettings.mobileContentHeight&&(e=this.pluginSettings.mobileContentHeight),a.contentHeight&&(e=a.contentHeight),e}containsUrl(a){return typeof a!="string"?!1:/(https?:\/\/[^\s"'<>[\]{}]+)/i.test(a)}renderTextWithUrls(a,e){if(typeof e!="string"){a.setText(String(e));return}let t=/(https?:\/\/[^\s"'<>[\]{}]+)/gi,n=0,i;for(t.lastIndex=0;(i=t.exec(e))!==null;){i.index>n&&a.appendChild(document.createTextNode(e.substring(n,i.index)));let s=i[0];a.createEl("a",{cls:"external-link",text:s,attr:{href:s,target:"_blank",rel:"noopener"}}),n=i.index+s.length}n<e.length&&a.appendChild(document.createTextNode(e.substring(n)))}isGroupByResults(a){return a&&typeof a=="object"&&a.idMeaning?a.idMeaning.type==="group":a&&typeof a=="object"&&a.primaryMeaning?a.primaryMeaning.type==="group":Array.isArray(a)?a.length>0&&a.every(t=>t&&typeof t=="object"&&"key"in t&&"rows"in t&&Array.isArray(t.rows)):a&&a.values&&Array.isArray(a.values)?a.values.length>0&&a.values.every(n=>n&&typeof n=="object"&&"key"in n&&"rows"in n&&Array.isArray(n.rows)):!1}renderDataviewTableGroupByKanban(a,e,t,n){var l;a.addClass("datacards-kanban-container"),a.style.setProperty("--kanban-column-width",t.kanbanColumnWidth),a.style.setProperty("--kanban-column-spacing",`${t.kanbanColumnSpacing}px`);let i=((l=e.idMeaning)==null?void 0:l.name)||"status",s=e.headers.indexOf(i);if(s===-1){console.error("Group column not found in headers:",i);return}[...new Set(e.values.map(d=>d[s]))].forEach(d=>{if(!d)return;let u=a.createEl("div",{cls:"datacards-kanban-column"});u.createEl("div",{cls:"datacards-kanban-header"}).createEl("span",{cls:"datacards-kanban-title",text:d}),u.createEl("div",{cls:"datacards-kanban-cards"}).createEl("div",{cls:"datacards-kanban-message",text:"Kanban with TABLE + GROUP BY is not fully supported. Use LIST + GROUP BY instead."})})}renderGroupedResults(a,e,t,n){r.debug("Rendering grouped results with",e.length,"groups"),e.forEach(i=>{a.createEl("div",{cls:"datacards-group-header",text:`${i.key} (${i.rows.length})`});let s=a.createEl("div",{cls:"datacards-group-container"});i.rows&&i.rows.length>0&&this.renderArrayResults(s,i.rows,t,n)})}renderDataviewListGroupByKanban(a,e,t,n){a.addClass("datacards-kanban-container"),a.style.setProperty("--kanban-column-width",t.kanbanColumnWidth),a.style.setProperty("--kanban-column-spacing",`${t.kanbanColumnSpacing}px`),(e.values||[]).forEach(s=>{if(!s)return;let o=a.createEl("div",{cls:"datacards-kanban-column"});o.createEl("div",{cls:"datacards-kanban-header"}).createEl("span",{cls:"datacards-kanban-title",text:s}),o.createEl("div",{cls:"datacards-kanban-cards"}).createEl("div",{cls:"datacards-kanban-message",text:`Group: ${s} - Use regular queries without GROUP BY for full kanban functionality.`})})}renderProgrammaticKanban(a,e,t,n){a.addClass("datacards-kanban-container"),a.style.setProperty("--kanban-column-width",t.kanbanColumnWidth),a.style.setProperty("--kanban-column-spacing",`${t.kanbanColumnSpacing}px`);let i="status",s=e.headers.indexOf(i);if(s===-1){console.error(`Kanban group column '${i}' not found in headers:`,e.headers),a.createEl("div",{cls:"datacards-error",text:`Kanban group column '${i}' not found. Available columns: ${e.headers.join(", ")}`});return}let o=new Map;e.values.forEach((d,u)=>{let p=d[s],h=p?String(p):"undefined";o.has(h)||o.set(h,[]),o.get(h).push(d)}),Array.from(o.entries()).sort(([d],[u])=>d.localeCompare(u)).forEach(([d,u])=>{this.createProgrammaticKanbanColumn(a,d,u,e.headers,t,n)})}createProgrammaticKanbanColumn(a,e,t,n,i,s){let o=e.toLowerCase().replace(/[^a-z0-9-]/g,"-"),l=a.createEl("div",{cls:"datacards-kanban-column",attr:{"data-status":o}});if(i.kanbanColors&&i.kanbanColors[e]){let h=i.kanbanColors[e];this.applyKanbanColumnColor(l,h,e)}let d=l.createEl("div",{cls:"datacards-kanban-header"});d.createEl("span",{cls:"datacards-kanban-title",text:e}),d.createEl("span",{cls:"datacards-kanban-count",text:`(${t.length})`});let u=d.createEl("button",{cls:"datacards-new-task-btn",attr:{"aria-label":`Add new task to ${e}`,title:`Add new task to ${e}`}});u.innerHTML="+",u.addEventListener("click",h=>{h.preventDefault(),h.stopPropagation(),this.showNewTaskModal(e,i,s)});let p=l.createEl("div",{cls:"datacards-kanban-cards"});this.renderKanbanCards(p,t,n,i,s)}renderKanbanCards(a,e,t,n,i){e.forEach((s,o)=>{r.debug(`Processing kanban row ${o}`);let l=this.createCardElement(a);n.imageProperty&&s[t.indexOf(n.imageProperty)]!==void 0&&this.addImageToCard(l,s[t.indexOf(n.imageProperty)]);let d=l.createEl("div",{cls:"datacards-content"}),u=t.findIndex(f=>f.toLowerCase()==="file");if(u!==-1&&s[u]!==void 0){let f=d.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(f,s[u]),n.enableClickableCards&&this.makeCardClickable(l,s[u])}let p=d.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(n)){p.addClass("datacards-scrollable-properties");let f=this.getContentHeight(n);p.setAttribute("data-content-height",f),p.addClass(`datacards-content-height-${f.replace("px","")}`)}let g=(n.properties==="all"?t:Array.isArray(n.properties)?n.properties:[]).filter(f=>!n.exclude.includes(f)&&f!==n.imageProperty&&f.toLowerCase()!=="file");r.debug("Using all headers as properties:",t),r.debug("Filtered properties (after excluding file):",g),g.forEach(f=>{let b=t.indexOf(f);if(b!==-1){let x=s[b];r.debug(`Checking property '${f}' in headers: true`),r.debug(`Property '${f}' value:`,x),r.debug(`Property '${f}' type:`,typeof x),r.debug(`Adding property to card: ${f} = ${x}`);let C=s[u],T={file:C,path:C==null?void 0:C.path,source:C,originalFile:C,filePath:typeof C=="string"?C:C==null?void 0:C.path};this.addPropertyToCard(p,f,x,n,i,T)}else r.debug(`Property '${f}' not found in headers`)}),g.length===0&&!t.some(f=>f.toLowerCase()==="file")&&(r.debug("No properties were added to the card"),d.createEl("div",{cls:"datacards-property",text:"No properties to display"}))})}showNewTaskModal(a,e,t){let n=this.extractTagFromQuery(),i=document.createElement("div");i.className="datacards-new-task-modal-overlay";let s=i.createEl("div",{cls:"datacards-new-task-modal"}),o=s.createEl("div",{cls:"datacards-modal-header"});o.createEl("h3",{text:`New Task - ${a}`,cls:"datacards-modal-title"});let l=o.createEl("button",{cls:"datacards-modal-close",text:"\xD7"}),d=s.createEl("div",{cls:"datacards-modal-body"}),u=d.createEl("div",{cls:"datacards-form-group"});u.createEl("label",{text:"Title *",cls:"datacards-form-label"});let p=u.createEl("input",{type:"text",cls:"datacards-form-input",attr:{placeholder:"Enter task title...",required:"true"}}),h=d.createEl("div",{cls:"datacards-form-group"});h.createEl("label",{text:"Status *",cls:"datacards-form-label"});let c=h.createEl("select",{cls:"datacards-form-input datacards-status-select"});(e.kanbanStatusOptions||["todo","in-progress","review","done"]).forEach(y=>{let E=c.createEl("option",{value:y,text:y.charAt(0).toUpperCase()+y.slice(1).replace("-"," ")});y===a&&(E.selected=!0)});let f=e.newTaskTemplate||{};if(typeof f=="string")try{f=JSON.parse(f)}catch(y){f={}}(!f||typeof f!="object")&&(f={priority:"",assignee:""});let b={};Object.entries(f).forEach(([y,E])=>{if(y==="status")return;let D=d.createEl("div",{cls:"datacards-form-group"});D.createEl("label",{text:y.charAt(0).toUpperCase()+y.slice(1),cls:"datacards-form-label"});let B=D.createEl("input",{type:"text",cls:"datacards-form-input",attr:{placeholder:`Enter ${y}...`}});B.value=String(E||""),b[y]=B});let x=s.createEl("div",{cls:"datacards-modal-footer"}),C=x.createEl("button",{text:"Cancel",cls:"datacards-btn datacards-btn-secondary"}),T=x.createEl("button",{text:"Create Task",cls:"datacards-btn datacards-btn-primary"}),S=()=>{i.remove()};l.addEventListener("click",S),C.addEventListener("click",S),i.addEventListener("click",y=>{y.target===i&&S()}),T.addEventListener("click",async()=>{let y=p.value.trim();if(!y){p.focus(),p.style.borderColor="var(--color-red)";return}let E=c.value;try{await this.createNewTask(y,E,b,e,n),S()}catch(D){console.error("Error creating new task:",D)}}),p.addEventListener("keydown",y=>{y.key==="Enter"&&T.click()}),document.body.appendChild(i),p.focus()}async createNewTask(a,e,t,n,i=null){try{let s={title:a,status:e};Object.entries(t).forEach(([g,f])=>{let b=f.value.trim();s[g]=b}),i&&(s.tags=[i]);let o=this.generateFilename(a),l=n.newTaskPath||"",d=l?`${l}/${o}`:o,p=`---
${Object.entries(s).map(([g,f])=>{let b=typeof f=="string"?`"${f}"`:f;return`${g}: ${b}`}).join(`
`)}
---

# ${a}

`,h=await this.app.vault.create(d,p);await this.app.workspace.getLeaf(!1).openFile(h),setTimeout(()=>{this.triggerRefresh()},100)}catch(s){throw console.error("Error creating task file:",s),s}}generateFilename(a){return`${a.replace(/[<>:"/\\|?*]/g,"").replace(/\s+/g,"-").toLowerCase()}.md`}extractTagFromQuery(){if(!this.currentQuery)return null;let a=/FROM\s+#([a-zA-Z0-9_-]+)/i,e=this.currentQuery.match(a);return e&&e[1]?e[1]:null}applyKanbanColumnColor(a,e,t){let n={blue:{cssVar:"var(--color-blue)",rgb:"var(--color-blue-rgb, 0, 122, 255)",fallback:"#007aff"},green:{cssVar:"var(--color-green)",rgb:"var(--color-green-rgb, 52, 199, 89)",fallback:"#34c759"},orange:{cssVar:"var(--color-orange)",rgb:"var(--color-orange-rgb, 255, 149, 0)",fallback:"#ff9500"},red:{cssVar:"var(--color-red)",rgb:"var(--color-red-rgb, 255, 59, 48)",fallback:"#ff3b30"},purple:{cssVar:"var(--color-purple)",rgb:"var(--color-purple-rgb, 175, 82, 222)",fallback:"#af52de"},pink:{cssVar:"var(--color-pink)",rgb:"var(--color-pink-rgb, 255, 45, 85)",fallback:"#ff2d55"},yellow:{cssVar:"var(--color-yellow)",rgb:"var(--color-yellow-rgb, 255, 204, 0)",fallback:"#ffcc00"},gray:{cssVar:"var(--text-muted)",rgb:"142, 142, 147",fallback:"#8e8e93"},grey:{cssVar:"var(--text-muted)",rgb:"142, 142, 147",fallback:"#8e8e93"}},i,s;if(n[e.toLowerCase()]){let o=n[e.toLowerCase()];i=o.cssVar,s=o.rgb}else e.startsWith("#")?(i=e,s=this.hexToRgb(e)):(i=n.gray.cssVar,s=n.gray.rgb);a.style.setProperty("--kanban-status-color",i),a.style.setProperty("--kanban-card-accent",s)}hexToRgb(a){let e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);if(e){let t=parseInt(e[1],16),n=parseInt(e[2],16),i=parseInt(e[3],16);return`${t}, ${n}, ${i}`}return"142, 142, 147"}sortGroupsByStatusOrder(a,e){return!e.kanbanStatusOrder||e.kanbanStatusOrder.length===0?a:[...a].sort((t,n)=>{let i=e.kanbanStatusOrder.indexOf(t.key),s=e.kanbanStatusOrder.indexOf(n.key);return i!==-1&&s!==-1?i-s:i!==-1?-1:s!==-1?1:0})}createKanbanColumn(a,e,t,n){let i=a.createEl("div",{cls:"datacards-kanban-column"}),s=i.createEl("div",{cls:"datacards-kanban-header"}),o=s.createEl("span",{cls:"datacards-kanban-title",text:e.key});t.kanbanShowColumnCounts&&s.createEl("span",{cls:"datacards-kanban-count",text:`(${e.rows.length})`});let l=i.createEl("div",{cls:"datacards-kanban-cards"});t.kanbanCompactCards&&l.addClass("datacards-kanban-compact"),e.rows&&e.rows.length>0&&this.renderArrayResults(l,e.rows,t,n)}extractHeadersFromRows(a){if(!a||a.length===0)return[];let e=new Set;return a.forEach(t=>{t&&typeof t=="object"&&Object.keys(t).forEach(n=>e.add(n))}),Array.from(e)}};var $=class{constructor(a){this.plugin=a}isDataviewEnabled(){return this.plugin.app.plugins.plugins.dataview!==void 0}getDataviewApi(){return this.isDataviewEnabled()?this.plugin.app.plugins.plugins.dataview.api:null}async executeQuery(a,e,t){let n=this.getDataviewApi();if(!n)return null;try{return await n.query(a,e,t)}catch(i){throw r.error("Error executing Dataview query:",i),i}}async waitForDataviewReady(){let a=this.getDataviewApi();return a?a.index&&a.index.initialized?(r.debug("Dataview index is already initialized"),!0):(r.debug("Waiting for Dataview index to be ready..."),new Promise(e=>{let t=this.plugin.app,n=t.metadataCache.on("dataview:index-ready",()=>{r.debug("Dataview index is now ready"),t.metadataCache.offref(n),e(!0)});setTimeout(()=>{r.warn("Timed out waiting for Dataview index"),t.metadataCache.offref(n),e(!1)},5e3)})):!1}async executeSafeQuery(a,e,t,n=0){let i=this.getDataviewApi();if(!i)return r.error("Dataview API not found. Make sure Dataview plugin is enabled."),{successful:!1,value:"Dataview plugin is not enabled"};if(!a||a.trim()==="")return r.error("Empty Dataview query"),{successful:!1,value:"Empty query"};r.debug("Executing Dataview query:",a),r.debug("Source path:",e);try{if(typeof i.query=="function"){r.debug("Using api.query method");try{let s=await i.query(a,e,t);return r.debug("Direct query result type:",typeof s),s==null?(r.error("Direct query returned undefined or null"),{successful:!1,value:"No results returned"}):(s&&typeof s=="object"&&("values"in s&&Array.isArray(s.values)&&r.debug("Result contains a values array with length:",s.values.length),"headers"in s&&Array.isArray(s.headers)&&r.debug("Result contains headers:",s.headers)),s&&typeof s=="object"&&"values"in s&&Array.isArray(s.values)&&s.values.length===0&&n<3?(r.debug(`Empty result, retrying (attempt ${n+1}/3)...`),new Promise(o=>{setTimeout(async()=>{let l=await this.executeSafeQuery(a,e,t,n+1);o(l)},500)})):{successful:!0,value:s})}catch(s){return r.error("Error in direct query:",s),{successful:!1,value:s?s.message||String(s):"Error in query execution"}}}else return r.error("Dataview API query method not found."),{successful:!1,value:"Incompatible Dataview API version"}}catch(s){return r.error("Error executing Dataview query:",s),{successful:!1,value:s?s.message||String(s):"Unknown error"}}}};function F(v,a,e=!1){let t=null,n=null,i=null,s;function o(...l){r.debug(`Debounce called, wait time: ${a}ms, has existing timeout: ${t!==null}`);let d=this;t&&(r.debug("Clearing previous debounce timeout"),clearTimeout(t),t=null),n=l,i=d;let u=()=>{r.debug("Debounce timeout expired, executing function"),t=null,e||(s=v.apply(d,l),t||(n=i=null))},p=e&&!t;return r.debug(`Setting new debounce timeout for ${a}ms`),t=setTimeout(u,a),p&&(r.debug("Immediate execution requested"),s=v.apply(d,l),n=i=null),s}return o.cancel=()=>{t&&clearTimeout(t),t=n=i=null},o.flush=()=>(t&&(clearTimeout(t),t=null,e||(s=v.apply(i,n),n=i=null)),s),o}var R=class extends k.Plugin{constructor(){super(...arguments);this.isRefreshing=!1;this.lastActiveElement=null}async onload(){await this.loadSettings(),r.setDebugMode(this.settings.debugMode),this.parserService=new A,this.rendererService=new L(this.app,this.settings),this.dataviewApiUtil=new $(this),this.updateDebouncedRefresh(),this.registerMarkdownCodeBlockProcessor("datacards",this.processDataCardsBlock.bind(this)),this.addSettingTab(new M(this.app,this)),this.addCommand({id:"refresh-datacards",name:"Refresh cards in active view",callback:()=>{this.refreshActiveView(!0)}}),this.registerDataviewEvents(),this.registerMetaBindEvents(),this.registerRefreshButtonEvents(),r.debug("DataCards plugin loaded")}updateDebouncedRefresh(){this.debouncedRefresh=F(()=>{r.debug(`Debounced refresh executing after ${this.settings.refreshDelay}ms`),this.refreshActiveView(!1)},this.settings.refreshDelay)}registerMetaBindEvents(){this.app.workspace.onLayoutReady(()=>{var e;if(this.metaBindPlugin=(e=this.app.plugins)==null?void 0:e.plugins["meta-bind"],!this.metaBindPlugin){r.debug("Meta Bind plugin not found or Obsidian plugins structure not accessible as expected. Skipping Meta Bind event registration.");return}r.debug("Meta Bind plugin found. Registering event listeners."),this.registerEvent(this.app.metadataCache.on("changed",t=>{t&&t.path&&(r.debug(`Obsidian metadata changed for file: ${t.path}`),this.handleMetaBindChange(t.path,null,null))})),this.metaBindPlugin.api&&typeof this.metaBindPlugin.api.onChange=="function"&&(r.debug("Registering using Meta Bind api.onChange"),this.registerEvent(this.metaBindPlugin.api.onChange((t,n,i)=>{let s=typeof t=="string"?t:t==null?void 0:t.path;s?(typeof i=="boolean"?r.debug(`Meta Bind onChange event (TOGGLE): file=${s}, key=${n}, value=${JSON.stringify(i)}`):r.debug(`Meta Bind onChange event: file=${s}, key=${n}, value=${JSON.stringify(i)}`),typeof i=="boolean"?(r.debug("Toggle input detected - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):this.handleMetaBindChange(s,n,i)):r.warn("Meta Bind onChange event received without a valid file path.")}))),this.metaBindPlugin.metadataManager&&typeof this.metaBindPlugin.metadataManager.on=="function"&&(r.debug("Registering using Meta Bind metadataManager events"),this.registerEvent(this.metaBindPlugin.metadataManager.on("changed",(t,n)=>{t&&t.storagePath?typeof n=="boolean"?(r.debug(`Meta Bind metadataManager 'changed' event (TOGGLE): path=${t.storagePath}, prop=${JSON.stringify(t.storageProp)}, value=${JSON.stringify(n)}`),r.debug("Toggle input detected in metadataManager - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):(r.debug(`Meta Bind metadataManager 'changed' event: path=${t.storagePath}, prop=${JSON.stringify(t.storageProp)}, value=${JSON.stringify(n)}`),this.handleMetaBindChange(t.storagePath,t.storageProp,n)):r.warn('Meta Bind metadataManager "changed" event received without a valid bindTarget.')})),this.registerEvent(this.metaBindPlugin.metadataManager.on("deleted",t=>{t&&t.storagePath&&(r.debug(`Meta Bind metadataManager 'deleted' event: path=${t.storagePath}, prop=${JSON.stringify(t.storageProp)}`),this.handleMetaBindChange(t.storagePath,t.storageProp,null))}))),this.metaBindPlugin.api&&typeof this.metaBindPlugin.api.onFieldChanged=="function"&&(r.debug("Registering using Meta Bind api.onFieldChanged"),this.registerEvent(this.metaBindPlugin.api.onFieldChanged((t,n,i,s)=>{n&&(r.debug(`Meta Bind onFieldChanged event: fieldType=${t}, file=${n}, key=${i}, value=${JSON.stringify(s)}`),t==="toggle"||typeof s=="boolean"?(r.debug("Toggle field changed - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):this.handleMetaBindChange(n,i,s))})))})}registerDataviewEvents(){this.app.workspace.onLayoutReady(()=>{if(!this.dataviewApiUtil.isDataviewEnabled()){r.warn("Dataview plugin is not enabled, cannot register for metadata change events");return}this.registerEvent(this.app.metadataCache.on("dataview:metadata-change",(e,t)=>{this.handleMetadataChange(e,t)})),r.debug("Registered for Dataview metadata change events")})}handleMetadataChange(e,t){if(!this.settings.enableDynamicUpdates){r.debug("Dynamic updates are disabled globally, ignoring metadata change");return}r.debug(`Dataview metadata changed: ${e} for file ${t==null?void 0:t.path}`),this.debouncedRefresh()}handleMetaBindChange(e,t,n){if(!this.settings.enableDynamicUpdates){r.debug("Dynamic updates are disabled globally, ignoring Meta Bind change");return}if(r.debug(`Meta Bind property changed: ${t} in file ${e}, value: ${JSON.stringify(n)}`),typeof n=="boolean"){r.debug(`Toggle value detected in handleMetaBindChange: ${n}`),this.forceDataviewCacheRefresh(e),setTimeout(()=>{this.refreshActiveView(!1)},50);return}this.debouncedRefresh()}forceDataviewCacheRefresh(e){if(r.debug(`Forcing Dataview cache refresh for file: ${e}`),!this.dataviewApiUtil.isDataviewEnabled()){r.warn("Dataview plugin is not enabled, cannot force cache refresh");return}try{let t=this.dataviewApiUtil.getDataviewApi();if(!t){r.warn("Dataview API not available, cannot force cache refresh");return}let n=this.app.vault.getAbstractFileByPath(e);if(!n||!("stat"in n)){r.warn(`File not found or not a file: ${e}`);return}try{let i=t.index;i&&typeof i.refreshFile=="function"?(i.refreshFile(n),r.debug(`Successfully forced Dataview cache refresh for file: ${e}`)):(this.app.metadataCache.trigger("dataview:metadata-change","update",n),r.debug(`Triggered dataview:metadata-change event for file: ${e}`))}catch(i){r.warn(`Error accessing Dataview internal API: ${i}`),this.app.metadataCache.trigger("dataview:metadata-change","update",n),r.debug(`Triggered dataview:metadata-change event for file: ${e}`)}}catch(t){r.warn(`Error forcing Dataview cache refresh: ${t}`)}}onunload(){this.refreshEventHandler&&window.removeEventListener("datacards-refresh-requested",this.refreshEventHandler),r.debug("DataCards plugin unloaded")}async loadSettings(){this.settings=Object.assign({},P,await this.loadData())}async saveSettings(){await this.saveData(this.settings),r.setDebugMode(this.settings.debugMode),this.rendererService.updateSettings(this.settings),this.updateDebouncedRefresh(),this.refreshActiveView(!0)}async processDataCardsBlock(e,t,n){r.debug("Processing DataCards block");try{let{query:i,settings:s}=this.parserService.parseDataCardsBlock(e),o=i.toLowerCase().includes("table without id"),l=i;o&&(i.toLowerCase().includes("file")||(l=i.replace(/table without id/i,"TABLE WITHOUT ID file,")));let d=n.sourcePath,u=document.createElement("div");u.className="datacards-hidden-container",document.body.appendChild(u);let p=await this.dataviewApiUtil.executeSafeQuery(l,d,u);if(document.body.removeChild(u),Array.isArray(p.value)&&p.value.length===0){r.debug("Dataview returned empty array"),this.rendererService.renderEmptyState(t,"No notes found");return}if(p.value.values&&Array.isArray(p.value.values)&&p.value.values.length===0){r.debug("Dataview returned empty table"),this.rendererService.renderEmptyState(t,"No notes found");return}let h=p.value;h&&typeof h=="object"&&"successful"in h&&"value"in h&&(r.debug("Unwrapping nested result structure"),h=h.value);let c=new k.MarkdownRenderChild(t);n.addChild(c),this.rendererService.setCurrentQuery(i),this.rendererService.renderCards(t,h,s,c)}catch(i){r.error("Error executing Dataview query:",i),t.createEl("div",{cls:"datacards-error",text:`Error executing Dataview query: ${i.message||String(i)}`})}}registerRefreshButtonEvents(){this.refreshEventHandler=()=>{this.refreshActiveView(!1)},window.addEventListener("datacards-refresh-requested",this.refreshEventHandler)}refreshActiveView(e=!0){if(this.isRefreshing){r.debug("Refresh already in progress, skipping.");return}this.isRefreshing=!0,r.debug("Starting refreshActiveView...");let t=this.app.workspace.getActiveViewOfType(k.MarkdownView);if(!t){e&&new k.Notice("No active markdown view to refresh",2e3),this.isRefreshing=!1,r.debug("No active markdown view found.");return}t.getMode()==="preview"&&t.previewMode?(r.debug("Refreshing in reading mode"),t.previewMode.rerender(!0)):(r.debug("Refreshing in editing mode"),this.refreshEditingMode(t)),e&&new k.Notice("DataCards refreshed",2e3),setTimeout(()=>{this.isRefreshing=!1,r.debug("Refresh finished.")},250)}refreshEditingMode(e){try{let t=e.editor;if(!t){r.warn("No editor found in active view");return}if(typeof e.requestUpdateLayout=="function"){r.debug("Using requestUpdateLayout method"),e.requestUpdateLayout();return}let n=t.getCursor(),i=t.getSelection(),s=t.getValue();t.setValue(""),setTimeout(()=>{if(t.setValue(s),i){let o=t.getCursor("from"),l=t.getCursor("to");t.setSelection(o,l)}else t.setCursor(n);r.debug("Editing mode refresh completed")},1)}catch(t){r.error("Error refreshing editing mode:",t)}}};

/* nosourcemap */